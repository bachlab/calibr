% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meta_bf_from_data.R
\name{meta_bf_from_data}
\alias{meta_bf_from_data}
\title{Compute Meta-Analytic Bayes Factors for Multiple Measurements with Subject-Level Effects}
\usage{
meta_bf_from_data(
  data,
  dataset_col = NULL,
  measurement_name_col,
  standard_scores_col,
  measurement_values_col,
  subject_id_col = NULL
)
}
\arguments{
\item{data}{A dataframe containing measurements, standard scores, and optionally subject IDs across datasets.}

\item{dataset_col}{A string specifying the column name that identifies datasets.}

\item{measurement_name_col}{A string specifying the column name that identifies different measurements.}

\item{standard_scores_col}{A string specifying the column name containing the standard scores.}

\item{measurement_values_col}{A string specifying the column name containing the measurement values.}

\item{subject_id_col}{(Optional) A string specifying the column name that identifies unique subjects.
If provided, and multiple datasets are present, the function computes subject-level overlap between measurements.}
}
\value{
A list containing:
\describe{
\item{meta_results}{A dataframe with the following columns for each measurement:
\itemize{
\item \code{measurement}: The measurement identifier.
\item \code{combined_bayes_factor}: The computed meta-analytic Bayes Factor.
\item \code{log_combined_bayes_factor}: Base 2 logarithm of the Bayes Factor.
\item \code{retrodiction_score}: Estimated Pearson correlation between the measurement and standard scores.
\item \code{sample_size}: Total sample size used for the measurement.
\item \code{combined_t_statistic}: The combined t-statistic used to compute the Bayes Factor.
}}
\item{subject_overlap}{A square matrix indicating the amount of shared subjects (based on combined dataset and subject ID)
between each pair of measurements. Returned only if \code{subject_id_col} is provided.}
}
}
\description{
This function computes \strong{meta-analytic Bayes Factors (BFs)} for multiple
measurements across different datasets while optionally accounting for subject-level effects.
It extracts statistics from each dataset for each measurement type and applies a weighted combination of
t-statistics. If subject IDs are provided and there are multiple datasets, the function also computes
the percentage of shared subjects between each pair of measurement types, serving as a proxy for the comparability
of Bayes Factors across measurements.
}
\examples{
# Load required library
require(dplyr)

# Set seed for reproducibility
set.seed(123)

# Function to generate a study dataset
generate_study <- function(study_id, n_per_group, within = TRUE) {
  df <- expand.grid(
    study_id = study_id,           # Study ID
    subject_id = 1:n_per_group,    # Unique subject ID for within-subject design
    standard_score = c(0, 1),      # Binary standard scores
    measurement_type = c("A", "B") # Two measurement types
  )
  # In a between-subject design, each subject only has one score
  if (!within) {
    df$subject_id <- 1:nrow(df)  # Ensure unique subject IDs
  }

  # Generate measurement values based on standard score and measurement type
  df$measurement <- with(df, rnorm(nrow(df),
                                   mean = ifelse(measurement_type == "A",
                                                 ifelse(standard_score == 1, 10, 5),
                                                 ifelse(standard_score == 1, 7, 6)),
                                   sd = 5))
  return(df)
}

# Generate example studies
all_studies <- do.call(rbind, list(
  generate_study("Study1", 30, within = TRUE),   # Within-subject study
  generate_study("Study2", 30, within = TRUE),   # Another within-subject study
  generate_study("Study3", 30, within = FALSE)   # Between-subject study
))

# Compute the meta-analytic Bayes Factor summary
result <- meta_bf_from_data(
  data = all_studies,
  dataset_col = "study_id",
  standard_scores_col = "standard_score",
  measurement_name_col = "measurement_type",
  measurement_values_col = "measurement",
  subject_id_col = "subject_id"
)

print(result$meta_results)        # Main Bayes Factor summary
print(result$subject_overlap)     # Optional subject overlap matrix
}

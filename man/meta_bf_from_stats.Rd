% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meta_bf_from_stats.R
\name{meta_bf_from_stats}
\alias{meta_bf_from_stats}
\title{Compute Meta-Analytic Bayes Factor From Stats}
\usage{
meta_bf_from_stats(
  n_datasets,
  t_statistics = rep(NA, n_datasets),
  sample_sizes,
  sum_squares = rep(NA, n_datasets),
  bayes_factors = rep(NA, n_datasets)
)
}
\arguments{
\item{n_datasets}{An integer specifying the number of datasets.}

\item{t_statistics}{A numeric vector of t-statistics for each dataset.
Defaults to \code{NA} for all entries, meaning Bayes Factors
must be provided if t-statistics are missing.}

\item{sample_sizes}{A numeric vector of sample sizes for each dataset.}

\item{sum_squares}{A numeric vector of sum of squares for each dataset.}

\item{bayes_factors}{A numeric vector of Bayes Factors for each dataset.
Defaults to \code{NA}. If \code{t_statistics} are provided,
these are ignored; otherwise, the function will
transform Bayes Factors into t-statistics.}
}
\value{
A list with two elements:
\item{combined_bayes_factor}{The computed \strong{meta-analytic Bayes Factor}.}
\item{combined_t_statistic}{The combined test statistic used to derive the Bayes Factor.}
}
\description{
This function computes a \strong{meta-analytic Bayes Factor (BF)} by combining test statistics
from multiple datasets using a weighted approach. The function allows input of either
t-statistics or precomputed Bayes Factors, transforming them when necessary.
It ensures valid statistical combination by weighting individual test statistics appropriately.
}
\examples{
# Example: Compute meta-analytic Bayes Factor from t-statistics
n_datasets <- 3
t_statistics <- c(2.5, 1.8, 2.0)
sample_sizes <- c(30, 40, 35)
sum_squares <- c(5, 6, 5.5)
meta_bf_from_stats(n_datasets, t_statistics, sample_sizes, sum_squares)

# Example: Compute meta-analytic Bayes Factor using Bayes Factors as input
bayes_factors <- c(10, 5, 8)  # BF values instead of t-statistics
meta_bf_from_stats(n_datasets, bayes_factors = bayes_factors, sample_sizes, sum_squares)
}

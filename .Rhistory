scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Log(BF) ",
subtitle = "Line alpha/width reflect overall sample size",
x = "Step",
y = "Log(BF)",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_retr <- step_results_combined %>%
ggplot(aes(x = step,
y = retrodiction_score,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Retrodiction Score ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Pearson r",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_hedg <- step_results_combined %>%
ggplot(aes(x = step,
y = meta_hedge_g,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Meta Hedge's g ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Hedge's g",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - The differences - - - - - - - - - - - - - - - -
extract_pairwise_df <- function(step_result, step_name) {
diffs <- as.data.frame(step_result$log_bayes_factor_diffs)
overlap <- as.data.frame(step_result$subject_overlap)
summary_table <- as.data.frame(step_result$summary_table)
if (ncol(diffs) <= 1) return(data.frame())
diffs$measurement1 <- rownames(diffs)
overlap$measurement1 <- rownames(overlap)
# Pivot longer for pairwise matrices
diffs_long <- diffs %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "log_bayes_factor_diff")
overlap_long <- overlap %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "subject_overlap")
# Get sample sizes per measurement from summary_table
sample_sizes <- summary_table %>%
dplyr::select(measurement, sample_size = sample_size)
# Join, create pair, and merge in sample sizes
pairwise_df <- diffs_long %>%
dplyr::left_join(overlap_long, by = c("measurement1", "measurement2")) %>%
dplyr::filter(measurement1 != measurement2) %>%
# Sort names for unique unordered pairs
dplyr::mutate(
measurement_low = pmin(as.character(measurement1), as.character(measurement2)),
measurement_high = pmax(as.character(measurement1), as.character(measurement2)),
measurements_involved = paste(measurement_low, measurement_high, sep = "-"),
step = step_name
) %>%
# Add sample sizes for each measurement in the pair
dplyr::left_join(sample_sizes, by = c("measurement1" = "measurement")) %>%
dplyr::rename(sample_size_1 = sample_size) %>%
dplyr::left_join(sample_sizes, by = c("measurement2" = "measurement")) %>%
dplyr::rename(sample_size_2 = sample_size) %>%
dplyr::select(step, measurements_involved, log_bayes_factor_diff, subject_overlap, sample_size_1, sample_size_2) %>%
dplyr::distinct(measurements_involved, .keep_all = TRUE) # Only one per pair
return(pairwise_df)
}
all_pairs <- list()
for (i in 1:9) {
step_name <- paste0("Step ", i)
res <- get(paste0("step_", i, "_result"))
out <- tryCatch(extract_pairwise_df(res, step_name), error = function(e) data.frame())
all_pairs[[i]] <- out
}
all_pairs_df <- bind_rows(all_pairs)
all_pairs_df <- all_pairs_df %>%
mutate(
step_num = as.integer(stringr::str_extract(step, "\\d+")),
step = case_when(
step_num == 1 ~ "1",
step_num == 2 ~ "1,2",
step_num > 2 ~ paste0("1..", step_num)
)
) %>%
select(-step_num)
plot_diff <- all_pairs_df %>%
filter(str_starts(measurements_involved, "HPR")) %>%
ggplot(aes(x = step,
y = log_bayes_factor_diff,
group = measurements_involved,
color = measurements_involved
)) +
geom_line(aes(alpha = subject_overlap, linewidth = subject_overlap), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(subject_overlap), size = sqrt(subject_overlap)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_grey(start = 0.1, end = 0.9, name = "Comparison Pair") +
labs(
title = "Log(BF) Difference (HPR pairs)",
subtitle = "Line alpha/width reflects subject overlap",
x = "Datasets integrated",
y = "Log(BF) Difference",
color = "Comparison Pair"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - Combined plots - - - - - - - - - - - - - - - -
library(patchwork)
da_plot <- plot_abs_lbf + plot_abs_retr + plot_diff
da_plot
plot_abs_lbf <- step_results_combined %>%
ggplot(aes(x = step,
y = log_combined_bayes_factor,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Log(BF) ",
subtitle = "Line alpha/width reflect overall sample size",
x = "Datasets integrated",
y = "Log(BF)",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_retr <- step_results_combined %>%
ggplot(aes(x = step,
y = retrodiction_score,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Retrodiction Score ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Pearson r",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_hedg <- step_results_combined %>%
ggplot(aes(x = step,
y = meta_hedge_g,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Meta Hedge's g ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Hedge's g",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - The differences - - - - - - - - - - - - - - - -
extract_pairwise_df <- function(step_result, step_name) {
diffs <- as.data.frame(step_result$log_bayes_factor_diffs)
overlap <- as.data.frame(step_result$subject_overlap)
summary_table <- as.data.frame(step_result$summary_table)
if (ncol(diffs) <= 1) return(data.frame())
diffs$measurement1 <- rownames(diffs)
overlap$measurement1 <- rownames(overlap)
# Pivot longer for pairwise matrices
diffs_long <- diffs %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "log_bayes_factor_diff")
overlap_long <- overlap %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "subject_overlap")
# Get sample sizes per measurement from summary_table
sample_sizes <- summary_table %>%
dplyr::select(measurement, sample_size = sample_size)
# Join, create pair, and merge in sample sizes
pairwise_df <- diffs_long %>%
dplyr::left_join(overlap_long, by = c("measurement1", "measurement2")) %>%
dplyr::filter(measurement1 != measurement2) %>%
# Sort names for unique unordered pairs
dplyr::mutate(
measurement_low = pmin(as.character(measurement1), as.character(measurement2)),
measurement_high = pmax(as.character(measurement1), as.character(measurement2)),
measurements_involved = paste(measurement_low, measurement_high, sep = "-"),
step = step_name
) %>%
# Add sample sizes for each measurement in the pair
dplyr::left_join(sample_sizes, by = c("measurement1" = "measurement")) %>%
dplyr::rename(sample_size_1 = sample_size) %>%
dplyr::left_join(sample_sizes, by = c("measurement2" = "measurement")) %>%
dplyr::rename(sample_size_2 = sample_size) %>%
dplyr::select(step, measurements_involved, log_bayes_factor_diff, subject_overlap, sample_size_1, sample_size_2) %>%
dplyr::distinct(measurements_involved, .keep_all = TRUE) # Only one per pair
return(pairwise_df)
}
all_pairs <- list()
for (i in 1:9) {
step_name <- paste0("Step ", i)
res <- get(paste0("step_", i, "_result"))
out <- tryCatch(extract_pairwise_df(res, step_name), error = function(e) data.frame())
all_pairs[[i]] <- out
}
all_pairs_df <- bind_rows(all_pairs)
all_pairs_df <- all_pairs_df %>%
mutate(
step_num = as.integer(stringr::str_extract(step, "\\d+")),
step = case_when(
step_num == 1 ~ "1",
step_num == 2 ~ "1,2",
step_num > 2 ~ paste0("1..", step_num)
)
) %>%
select(-step_num)
plot_diff <- all_pairs_df %>%
filter(str_starts(measurements_involved, "HPR")) %>%
ggplot(aes(x = step,
y = log_bayes_factor_diff,
group = measurements_involved,
color = measurements_involved
)) +
geom_line(aes(alpha = subject_overlap, linewidth = subject_overlap), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(subject_overlap), size = sqrt(subject_overlap)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_grey(start = 0.1, end = 0.9, name = "Comparison Pair") +
labs(
title = "Log(BF) Difference (HPR pairs)",
subtitle = "Line alpha/width reflects subject overlap",
x = "Datasets integrated",
y = "Log(BF) Difference",
color = "Comparison Pair"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - Combined plots - - - - - - - - - - - - - - - -
library(patchwork)
da_plot <- plot_abs_lbf + plot_abs_retr + plot_diff
da_plot
ggsave("../_Temporary/ensemble_img_calibration.png", plot = da_plot, width = 9, height = 2.5)
plot_abs_lbf <- step_results_combined %>%
ggplot(aes(x = step,
y = log_combined_bayes_factor,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Log(BF) ",
subtitle = "Line alpha/width reflect overall sample size",
x = "Datasets integrated",
y = "Log(BF)",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_retr <- step_results_combined %>%
ggplot(aes(x = step,
y = retrodiction_score,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Retrodiction Score ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Pearson r",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
plot_abs_hedg <- step_results_combined %>%
ggplot(aes(x = step,
y = meta_hedge_g,
group = measurement,
color = measurement)) +
geom_line(aes(alpha = sqrt(sample_size), linewidth = sqrt(sample_size)), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(sample_size), size = sqrt(sample_size)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_brewer(palette = "Set1", name = "Measurement") +
labs(
title = "Meta Hedge's g ",
subtitle = "Line alpha/width reflects overall sample size",
x = "Datasets integrated",
y = "Hedge's g",
color = "Measurement"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - The differences - - - - - - - - - - - - - - - -
extract_pairwise_df <- function(step_result, step_name) {
diffs <- as.data.frame(step_result$log_bayes_factor_diffs)
overlap <- as.data.frame(step_result$subject_overlap)
summary_table <- as.data.frame(step_result$summary_table)
if (ncol(diffs) <= 1) return(data.frame())
diffs$measurement1 <- rownames(diffs)
overlap$measurement1 <- rownames(overlap)
# Pivot longer for pairwise matrices
diffs_long <- diffs %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "log_bayes_factor_diff")
overlap_long <- overlap %>%
tidyr::pivot_longer(-measurement1, names_to = "measurement2", values_to = "subject_overlap")
# Get sample sizes per measurement from summary_table
sample_sizes <- summary_table %>%
dplyr::select(measurement, sample_size = sample_size)
# Join, create pair, and merge in sample sizes
pairwise_df <- diffs_long %>%
dplyr::left_join(overlap_long, by = c("measurement1", "measurement2")) %>%
dplyr::filter(measurement1 != measurement2) %>%
# Sort names for unique unordered pairs
dplyr::mutate(
measurement_low = pmin(as.character(measurement1), as.character(measurement2)),
measurement_high = pmax(as.character(measurement1), as.character(measurement2)),
measurements_involved = paste(measurement_low, measurement_high, sep = "-"),
step = step_name
) %>%
# Add sample sizes for each measurement in the pair
dplyr::left_join(sample_sizes, by = c("measurement1" = "measurement")) %>%
dplyr::rename(sample_size_1 = sample_size) %>%
dplyr::left_join(sample_sizes, by = c("measurement2" = "measurement")) %>%
dplyr::rename(sample_size_2 = sample_size) %>%
dplyr::select(step, measurements_involved, log_bayes_factor_diff, subject_overlap, sample_size_1, sample_size_2) %>%
dplyr::distinct(measurements_involved, .keep_all = TRUE) # Only one per pair
return(pairwise_df)
}
all_pairs <- list()
for (i in 1:9) {
step_name <- paste0("Step ", i)
res <- get(paste0("step_", i, "_result"))
out <- tryCatch(extract_pairwise_df(res, step_name), error = function(e) data.frame())
all_pairs[[i]] <- out
}
all_pairs_df <- bind_rows(all_pairs)
all_pairs_df <- all_pairs_df %>%
mutate(
step_num = as.integer(stringr::str_extract(step, "\\d+")),
step = case_when(
step_num == 1 ~ "1",
step_num == 2 ~ "1,2",
step_num > 2 ~ paste0("1..", step_num)
)
) %>%
select(-step_num)
plot_diff <- all_pairs_df %>%
filter(str_starts(measurements_involved, "HPR")) %>%
ggplot(aes(x = step,
y = log_bayes_factor_diff,
group = measurements_involved,
color = measurements_involved
)) +
geom_line(aes(alpha = subject_overlap, linewidth = subject_overlap), show.legend = TRUE) +
# geom_point(aes(alpha = sqrt(subject_overlap), size = sqrt(subject_overlap)),
#            shape = 21, fill = "white", stroke = 1.2, show.legend = TRUE) +
scale_alpha(range = c(0.5, 1), guide = "none") +
scale_linewidth(range = c(0.8, 2.5), guide = "none") +
scale_size(range = c(2, 6), guide = "none") +
scale_color_grey(start = 0.1, end = 0.9, name = "Comparison Pair") +
labs(
title = "Log(BF) Difference (HPR pairs)",
subtitle = "Line width reflects subject overlap",
x = "Datasets integrated",
y = "Log(BF) Difference",
color = "Comparison Pair"
) +
theme_minimal(base_size = 9) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold")
)
# - - - - - - - - - - - - Combined plots - - - - - - - - - - - - - - - -
library(patchwork)
da_plot <- plot_abs_lbf + plot_abs_retr + plot_diff
ggsave("../_Temporary/ensemble_img_calibration.png", plot = da_plot, width = 9, height = 2.5)
step_9_result$subject_overlap
step_9_result
step_9_result
